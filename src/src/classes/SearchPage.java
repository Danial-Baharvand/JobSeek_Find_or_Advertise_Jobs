package classes;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Locale;

public class SearchPage {
    private JTextField searchTBox;
    private JButton searchButton;
    private JComboBox<String> stateCBox;
    private JComboBox<Object> catCBox;
    private JComboBox jobTypeCBox;
    private JSlider salarySlider;
    private JTextField keywordsTBox;
    private JPanel searchPanel;
    private JLabel StateLabel;
    private JLabel catLabel;
    private JLabel jobTypeLabel;
    private JLabel lowSalLabel;
    private JLabel midSalLabel;
    private JLabel highSalLabel;
    private JButton backButton;
    private JButton homeButton;
    private JTextArea textArea1;

    public JPanel getSearchPanel() {
        return searchPanel;
    }

    public SearchPage(HashSet<Job> jobs) {
        /**test code to check categories' functionality
         should be removed when adding categories by recruiters is implemented
         */
        Categories categories = new Categories();
        categories.addCat("CompSci", "0001");
        categories.addCat("Networking", "0002");
        categories.addCat("AI", "0003");
        catCBox.setModel(new DefaultComboBoxModel<>(categories.getMap().keySet().toArray()));
        catCBox.addItem("Any");
        catCBox.setSelectedItem("Any");


        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Creates a new search object and adds the user's selected criteria to it
                Search search = new Search(jobs);
                search.setSearchText(searchTBox.getText());
                search.setState((String) stateCBox.getSelectedItem());
                search.setCat((String) catCBox.getSelectedItem());
                search.setJobType((String) jobTypeCBox.getSelectedItem());
                search.setSalary(salarySlider.getValue());
                search.setKeywords(keywordsTBox.getText());
                search.setScores();
                Runtime.showSearchResultsPage(Runtime.frame, search);
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        searchPanel = new JPanel();
        searchPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(12, 8, new Insets(20, 20, 20, 20), -1, -1));
        searchPanel.setBackground(new Color(-13224648));
        searchPanel.setEnabled(false);
        searchPanel.setForeground(new Color(-1));
        searchTBox = new JTextField();
        searchTBox.setBackground(new Color(-1973791));
        searchTBox.setEditable(true);
        Font searchTBoxFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, searchTBox.getFont());
        if (searchTBoxFont != null) searchTBox.setFont(searchTBoxFont);
        searchTBox.setForeground(new Color(-13224648));
        searchTBox.setText("I am looking for...");
        searchPanel.add(searchTBox, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        searchPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 6, 7, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        jobTypeCBox = new JComboBox();
        jobTypeCBox.setBackground(new Color(-1973791));
        Font jobTypeCBoxFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, jobTypeCBox.getFont());
        if (jobTypeCBoxFont != null) jobTypeCBox.setFont(jobTypeCBoxFont);
        jobTypeCBox.setForeground(new Color(-13224648));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Any");
        defaultComboBoxModel1.addElement("Full-Time");
        defaultComboBoxModel1.addElement("Part-Time");
        defaultComboBoxModel1.addElement("Casual");
        jobTypeCBox.setModel(defaultComboBoxModel1);
        searchPanel.add(jobTypeCBox, new com.intellij.uiDesigner.core.GridConstraints(8, 7, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jobTypeLabel = new JLabel();
        Font jobTypeLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, jobTypeLabel.getFont());
        if (jobTypeLabelFont != null) jobTypeLabel.setFont(jobTypeLabelFont);
        jobTypeLabel.setForeground(new Color(-1));
        jobTypeLabel.setText("Job Type");
        searchPanel.add(jobTypeLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        keywordsTBox = new JTextField();
        keywordsTBox.setBackground(new Color(-1973791));
        Font keywordsTBoxFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, keywordsTBox.getFont());
        if (keywordsTBoxFont != null) keywordsTBox.setFont(keywordsTBoxFont);
        keywordsTBox.setForeground(new Color(-13224648));
        keywordsTBox.setText("Type in keywords seperated by comma");
        searchPanel.add(keywordsTBox, new com.intellij.uiDesigner.core.GridConstraints(11, 0, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 2), new Dimension(150, -1), null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        searchPanel.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        homeButton = new JButton();
        homeButton.setText("Home");
        searchPanel.add(homeButton, new com.intellij.uiDesigner.core.GridConstraints(0, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textArea1 = new JTextArea();
        textArea1.setBackground(new Color(-11348236));
        searchPanel.add(textArea1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, 1, 1, null, new Dimension(150, 15), new Dimension(-1, 1), 0, false));
        searchButton = new JButton();
        searchButton.setText("Search");
        searchPanel.add(searchButton, new com.intellij.uiDesigner.core.GridConstraints(2, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stateCBox = new JComboBox();
        stateCBox.setBackground(new Color(-1973791));
        stateCBox.setEditable(false);
        stateCBox.setEnabled(true);
        Font stateCBoxFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, stateCBox.getFont());
        if (stateCBoxFont != null) stateCBox.setFont(stateCBoxFont);
        stateCBox.setForeground(new Color(-13224648));
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("Any");
        defaultComboBoxModel2.addElement("QLD");
        defaultComboBoxModel2.addElement("NSW");
        defaultComboBoxModel2.addElement("VIC");
        defaultComboBoxModel2.addElement("ACT");
        defaultComboBoxModel2.addElement("WA");
        defaultComboBoxModel2.addElement("NT");
        defaultComboBoxModel2.addElement("SA");
        defaultComboBoxModel2.addElement("TAS");
        stateCBox.setModel(defaultComboBoxModel2);
        searchPanel.add(stateCBox, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 2, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        catCBox = new JComboBox();
        catCBox.setBackground(new Color(-1973791));
        Font catCBoxFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, catCBox.getFont());
        if (catCBoxFont != null) catCBox.setFont(catCBoxFont);
        catCBox.setForeground(new Color(-13224648));
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("Any");
        catCBox.setModel(defaultComboBoxModel3);
        searchPanel.add(catCBox, new com.intellij.uiDesigner.core.GridConstraints(4, 7, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        catLabel = new JLabel();
        Font catLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, catLabel.getFont());
        if (catLabelFont != null) catLabel.setFont(catLabelFont);
        catLabel.setForeground(new Color(-1));
        catLabel.setText("Categories");
        searchPanel.add(catLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        StateLabel = new JLabel();
        Font StateLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, StateLabel.getFont());
        if (StateLabelFont != null) StateLabel.setFont(StateLabelFont);
        StateLabel.setForeground(new Color(-1));
        StateLabel.setText("State");
        searchPanel.add(StateLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lowSalLabel = new JLabel();
        Font lowSalLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, lowSalLabel.getFont());
        if (lowSalLabelFont != null) lowSalLabel.setFont(lowSalLabelFont);
        lowSalLabel.setForeground(new Color(-1));
        lowSalLabel.setText("$30K");
        searchPanel.add(lowSalLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        highSalLabel = new JLabel();
        Font highSalLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, highSalLabel.getFont());
        if (highSalLabelFont != null) highSalLabel.setFont(highSalLabelFont);
        highSalLabel.setForeground(new Color(-1));
        highSalLabel.setText("$230K");
        searchPanel.add(highSalLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        salarySlider = new JSlider();
        salarySlider.setBackground(new Color(-13224648));
        salarySlider.setForeground(new Color(-1973791));
        salarySlider.putClientProperty("JSlider.isFilled", Boolean.TRUE);
        salarySlider.putClientProperty("Slider.paintThumbArrowShape", Boolean.TRUE);
        searchPanel.add(salarySlider, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        midSalLabel = new JLabel();
        Font midSalLabelFont = this.$$$getFont$$$("Calibri Light", Font.PLAIN, 16, midSalLabel.getFont());
        if (midSalLabelFont != null) midSalLabel.setFont(midSalLabelFont);
        midSalLabel.setForeground(new Color(-1));
        midSalLabel.setText("$130K");
        searchPanel.add(midSalLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return searchPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
